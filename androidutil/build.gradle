apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions' //扩展插件

apply plugin: 'kotlin-kapt'  //kapt3插件

//apply plugin: 'com.getkeepsafe.dexcount'
android {
  compileSdkVersion rootProject.ext.android.compileSdkVersion

  defaultConfig {
    minSdkVersion rootProject.ext.android.minSdkVersion
    targetSdkVersion rootProject.ext.android.targetSdkVersion
    versionCode 1
    versionName "1.0"
    consumerProguardFiles 'proguard-rules.pro'
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }
  kotlinOptions {
    jvmTarget = "1.8"
  }
  lintOptions {
    disable 'GoogleAppIndexingWarning'
    abortOnError false

  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  buildTypes {
    release {
      minifyEnabled true
       proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    //  consumerProguardFiles 'proguard-rules.pro'
    }
    debug {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

    }
  }

  sourceSets {
    main {
      jniLibs.srcDirs = ['libs']
    }


    debug.setRoot('build-types/debug')
    release.setRoot('build-types/release')
  }
}
//为Dagger创建了需要的自生成类
//kapt {
//  generateStubs = true
//}
dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  def lifecycle_version = "2.2.0"

  // ViewModel and LiveData
  api "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
  // alternatively - just ViewModel
  api "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version" // use -ktx for Kotlin
  // alternatively - just LiveData
  api "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
  // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
  //     AndroidX libraries use this lightweight import for Lifecycle
  api "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"


  api "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
  //kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
  // use kapt for Kotlin
  // alternately - if using Java8, use the following instead of lifecycle-compiler
  // optional - ReactiveStreams support for LiveData
  api "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // use -ktx for Kotlin
  api "androidx.appcompat:appcompat:$appCompatVersion"
  api "androidx.cardview:cardview:$cardVersion"

  def preference_version = "1.1.1"
  api "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
  api "androidx.preference:preference:$preference_version"
  api "androidx.preference:preference-ktx:$preference_version"
  api "com.google.android.material:material:$materialVersion"
  api "androidx.recyclerview:recyclerview:$recyclerViewVersion"
  api "androidx.annotation:annotation:$androidXAnnotations"
  api "androidx.legacy:legacy-support-v4:$androidXLegacySupport"
  api "androidx.core:core-ktx:$coreKtxVersion"
//  api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
  api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.5'
  api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
  // optional - Test helpers for LiveData


  def room_version = "2.2.5"

  api "androidx.room:room-runtime:$room_version"
  kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

  // optional - Kotlin Extensions and Coroutines support for Room
  api "androidx.room:room-ktx:$room_version"

  // optional - RxJava support for Room
  api "androidx.room:room-rxjava2:$room_version"

  // optional - Guava support for Room, including Optional and ListenableFuture
  api "androidx.room:room-guava:$room_version"

  // Test helpers
  testImplementation "androidx.room:room-testing:$room_version"
  testImplementation 'junit:junit:4.13'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
  api rootProject.ext.rxJavaLibs
 // api rootProject.ext.supportLibs
  api rootProject.ext.networkLibs
  api  'com.android.support.constraint:constraint-layout:1.1.3'
 // api 'com.bilibili:magicasakura:0.1.8@aar'
  api 'com.classic.common:multiple-status-view:1.5.1'

  def  dagger2_version="2.27"
  api "com.google.dagger:dagger-android:$dagger2_version"
  api "com.google.dagger:dagger-android-support:$dagger2_version"
  // if you use the support libraries
  kapt "com.google.dagger:dagger-android-processor:$dagger2_version"
  kapt "com.google.dagger:dagger-compiler:$dagger2_version"
  api "com.jakewharton.timber:timber:4.7.1"


  //api 'com.github.tbruyelle:rxpermissions:0.10.2'
  api "org.permissionsdispatcher:permissionsdispatcher-ktx:1.0.0-alpha2"
  api "org.permissionsdispatcher:permissionsdispatcher:4.7.0"
  kapt "org.permissionsdispatcher:permissionsdispatcher-processor:4.7.0"
  api files('libs/rfidapi.jar')
  api 'com.github.GrenderG:Toasty:1.3.0'
  api 'com.afollestad.material-dialogs:core:3.3.0'
  api 'com.afollestad.material-dialogs:input:3.3.0'

  api 'com.alibaba:fastjson:1.1.71.android'
  implementation 'me.yokeyword:fragmentation:1.3.6'
  api 'com.blankj:utilcodex:1.29.0'
  api 'com.orhanobut:logger:2.2.0'
  api 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.3'
  api 'com.qmuiteam:qmui:2.0.0-alpha09'
  implementation 'com.wang.avi:library:2.1.3'
  api 'com.uber.autodispose:autodispose:1.3.0'
  api 'com.uber.autodispose:autodispose-lifecycle:1.3.0'
  api 'com.uber.autodispose:autodispose-android:1.3.0'
  api 'com.uber.autodispose:autodispose-rxlifecycle:1.3.0'
  api 'com.uber.autodispose:autodispose-android-archcomponents:1.3.0'
}
